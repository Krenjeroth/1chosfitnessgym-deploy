import{p as _,F as C,y as r}from"./CmAaC7-r.js";import{u as F}from"./B_gzkPqb.js";import{b as L,c as M}from"./upptak3D.js";import{u as Y}from"./moRlnmHh.js";const H=()=>{const l=F(),c=_(()=>new URL("http://1chosfitnessgym/api/plans")),u=_(()=>new URL("http://1chosfitnessgym/api/plan-select"));return{getPlansApi:async a=>await l(`${c.value}?${a.toString()}`),addPlanApi:async a=>await l(`${c.value}`,{method:"POST",body:a}),updatePlanApi:async(a,o)=>await l(`${c.value}/${a}`,{method:"PUT",body:o}),getPlanSelectApi:async()=>await l(`${u.value}`),deletePlanApi:async a=>await l(`${c.value}/${a}`,{method:"DELETE",headers:{Accept:"application/json"}})}},O=C("planStore",()=>{const{getPlansApi:l,addPlanApi:c,updatePlanApi:u,deletePlanApi:v,getPlanSelectApi:y}=H(),{hasError:g,errorBag:h,transformValidationErrors:i,resetErrorBag:a}=L(),{capitalizeWords:o}=Y(),{transformUtcDatetime:D}=M();let A;(t=>{t.ASC="asc",t.DESC="desc"})(A||(A={}));const S=r([]),s=r(!1),f=r(1),w=r(5),$=r(""),d=r({column:"created_at",direction:"desc"}),E=r(0),U=r([]),p=r("");return{plans:S,loading:s,errorBag:h,hasError:g,page:f,pageCount:w,search:$,sort:d,totalPlans:E,selectedStatus:p,planSelect:U,getPlans:async()=>{s.value=!0;try{const t=new URLSearchParams({page:f.value.toString(),per_page:w.value.toString(),sort:d.value.column,order:d.value.direction,search:$.value,...p.value?{status:p.value}:{}}),e=await l(t);S.value=e.data.map(n=>({...n,validity_formatted:`${n.validity} ${n.validity>1?"mos.":"mo."}`,price_formatted:`â‚±${n.price}`,status_word:n.status?"Active":"Inactive",created_at:D(n.created_at,"MMMM DD, YYYY hh:mm A")})),E.value=Number(e.meta.total)||0}catch(t){throw t}finally{s.value=!1}},addPlan:async t=>{s.value=!0,a();const e=o(t.name),n=o(t.description),m={...t,name:e,description:n,status:1};await c(m).catch(P=>{i(P)}).finally(()=>{s.value=!1})},updatePlan:async(t,e)=>{s.value=!0,a();const n=o(e.name),m=o(e.description),P={...e,name:n,description:m,status:1};await u(t,P).catch(b=>{i(b)}).finally(()=>{s.value=!1})},getPlanSelect:async()=>{try{const t=await y();U.value=t.data.map(e=>({...e}))}catch(t){console.log(t)}},deletePlan:async t=>{s.value=!0,a(),await v(t).catch(e=>{i(e)}).finally(()=>{s.value=!1})}}});export{O as u};
